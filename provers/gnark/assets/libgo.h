/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/tiannian/rsnark/provers-gnark */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "gen.go"

// Generated by rust2go. Please DO NOT edit this C part manually.

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef struct ListRef {
  const void *ptr;
  uintptr_t len;
} ListRef;

typedef struct StringRef {
  const uint8_t *ptr;
  uintptr_t len;
} StringRef;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void CGroth16Prover_groth16_create(uint64_t curve_id, void* slot, void* cb);
extern void CGroth16Prover_groth16_compile(uint64_t curve_id, ListRef circuit, void* slot, void* cb);
extern void CGroth16Prover_groth16_setup(uint64_t prover, int64_t compiled_circuit, void* slot, void* cb);
extern void CGroth16Prover_groth16_prove(uint64_t prover, int64_t compiled_circuit, int64_t pk, ListRef witness, void* slot, void* cb);
extern void CGroth16Prover_groth16_verify(uint64_t prover, int64_t vk, int64_t proof, ListRef public_witness, void* slot, void* cb);
extern void CGroth16Prover_groth16_remove_prover(uint64_t prover);
extern void CPlonkProver_plonk_create(uint64_t curve_id, void* slot, void* cb);
extern void CPlonkProver_plonk_compile(uint64_t curve_id, ListRef circuit, void* slot, void* cb);
extern void CPlonkProver_plonk_setup(uint64_t prover, int64_t compiled_circuit, void* slot, void* cb);
extern void CPlonkProver_plonk_prove(uint64_t prover, int64_t compiled_circuit, int64_t pk, ListRef witness, void* slot, void* cb);
extern void CPlonkProver_plonk_verify(uint64_t prover, int64_t vk, int64_t proof, ListRef public_witness, void* slot, void* cb);
extern void CPlonkProver_plonk_remove_prover(uint64_t prover);
extern void CObject_serialize(int64_t object_id, void* slot, void* cb);
extern void CObject_deserialize(uint64_t ty, uint64_t curve_id, ListRef data, void* slot, void* cb);
extern void CObject_write_to_file(int64_t object_id, StringRef path, void* slot, void* cb);
extern void CObject_read_from_file(uint64_t ty, uint64_t curve_id, StringRef path, void* slot, void* cb);
extern void CObject_export_solidity(int64_t object_id, void* slot, void* cb);
extern void CObject_remove_object(int64_t object_id);

#ifdef __cplusplus
}
#endif
